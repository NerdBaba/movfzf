#!/usr/bin/env bash

# === CONFIGURATION ===
CONFIG_FILE="$HOME/.scloud_ripper_token"
BASE_URL="https://new4.scloud.ninja"
TOKEN_URL="${BASE_URL}/get-search-token"
USER_AGENT="Mozilla/5.0 (X11; Linux x86_64; rv:136.0) Gecko/20100101 Firefox/136.0"
# === END CONFIGURATION ===

DEBUG_MODE=0
FOUL_MOUTH_MODE=0 # 0 for professional, 1 for foul

# Helper function for debug messages (always a bit raw)
_debug_echo() {
    if [ "$DEBUG_MODE" -eq 1 ]; then
        echo "[DEBUG] $@" >&2
    fi
}
_debug_token_echo() {
    if [ "$DEBUG_MODE" -eq 1 ]; then
        echo "[DEBUG_TOKEN] $@" >&2
    fi
}

# Helper function for user-facing messages
# _say "professional message" "foul message" [stream]
# stream defaults to stderr (2), can be stdout (1)
_say() {
    local prof_msg="$1"
    local foul_msg="$2"
    local output_stream="${3:-2}" # Default to stderr

    if [ "$FOUL_MOUTH_MODE" -eq 1 ]; then
        if [[ "$output_stream" -eq 1 ]]; then
            echo "$foul_msg"
        else
            echo "$foul_msg" >&2
        fi
    else
        if [[ "$output_stream" -eq 1 ]]; then
            echo "$prof_msg"
        else
            echo "$prof_msg" >&2
        fi
    fi
}


load_token_from_file() {
  if [ -f "$CONFIG_FILE" ]; then
    local token
    token=$(head -n 1 "$CONFIG_FILE" | tr -d '\n\r')
    _debug_echo "Loaded token from file (len ${#token}): [${token}]"
    echo "$token"
  else
    _debug_echo "No token file found at $CONFIG_FILE"
    echo ""
  fi
}

save_token_to_file() {
  local token_to_save="$1"
  printf "%s" "$token_to_save" > "$CONFIG_FILE"
  chmod 600 "$CONFIG_FILE"
  _say "[INFO] New CF token saved to $CONFIG_FILE." \
       "[+] New CF token saved to $CONFIG_FILE, you efficient bastard!"
}

prompt_and_save_new_token() {
  # Prompt itself must be clear
  echo -n "[PROMPT] Your Cloudflare token may be outdated.
    Please visit: ${BASE_URL}
    Open Developer Tools (F12), navigate to the Network tab.
    Find a request to the site, then locate and copy the 'cf_clearance' cookie value.
    Paste the new cf_clearance token here: " >&2
  read -r new_token_input
  new_token_input=$(echo "$new_token_input" | xargs) 
  if [ -n "$new_token_input" ]; then
    save_token_to_file "$new_token_input"
    echo "$new_token_input" 
  else
    _say "[INFO] No token was entered. Exiting." \
         "[!] No token entered. Guess you don't want to pirate today, huh? Fine, fuck off then."
    echo "" 
  fi
}

perform_search_attempt() {
    local current_search_term="$1"
    local current_cookie="$2"
    local attempt_description="$3" 

    _debug_echo "=== Starting perform_search_attempt (${attempt_description}) ==="
    _debug_token_echo "Using CF_CLEARANCE (len ${#current_cookie}): [${current_cookie}]"
    
    local curl_exit_code

    if [ "$DEBUG_MODE" -eq 1 ]; then _debug_echo "About to run POST curl. Enabling set -x..."; set -x; fi
    EFFECTIVE_URL=$(curl -s -L -X POST \
      -H "User-Agent: ${USER_AGENT}" \
      -H "Cookie: cf_clearance=${current_cookie}" \
      --data-urlencode "search_query=${current_search_term}" \
      -o /dev/null \
      -w '%{url_effective}' \
      "${TOKEN_URL}")
    curl_exit_code=$?
    if [ "$DEBUG_MODE" -eq 1 ]; then set +x; _debug_echo "POST curl finished. Exit: ${curl_exit_code}"; fi
    _debug_echo "EFFECTIVE_URL after POST: [${EFFECTIVE_URL}]"

    if [[ "$curl_exit_code" -ne 0 ]]; then
        _say "[ERROR] The initial POST request failed (curl exit code ${curl_exit_code})." \
             "[!] FUCK! curl POST command itself failed (exit code ${curl_exit_code}), the internet is probably broken or something."
        EFFECTIVE_URL=""
        return 1
    fi

    if [[ -z "$EFFECTIVE_URL" || "$EFFECTIVE_URL" == "$TOKEN_URL" || "$EFFECTIVE_URL" != *"$BASE_URL"* ]]; then
      _say "[ERROR] The POST request did not redirect to a valid search session URL." \
           "[!] FUCK! POST to ${TOKEN_URL} failed to redirect properly. Your token might be as dead as a dodo."
      EFFECTIVE_URL=""
      return 1 
    fi
    _say "[INFO] Session URL obtained: ${EFFECTIVE_URL}" \
         "[+] Got session URL via POST: ${EFFECTIVE_URL}. Nice one, slick."

    if [ "$DEBUG_MODE" -eq 1 ]; then _debug_echo "About to run GET curl. Enabling set -x..."; set -x; fi
    SEARCH_RESULTS_HTML=$(curl -s -L \
      -H "User-Agent: ${USER_AGENT}" \
      -H "Cookie: cf_clearance=${current_cookie}" \
      -H "Referer: ${BASE_URL}/" \
      "${EFFECTIVE_URL}")
    curl_exit_code=$?
    if [ "$DEBUG_MODE" -eq 1 ]; then set +x; _debug_echo "GET curl finished. Exit: ${curl_exit_code}"; fi

    if [[ "$curl_exit_code" -ne 0 ]]; then
        _say "[ERROR] The GET request for search results failed (curl exit code ${curl_exit_code})." \
             "[!] FUCK! curl GET command itself shit the bed (exit code ${curl_exit_code}). What now, genius?"
        SEARCH_RESULTS_HTML=""
        return 1
    fi
    
    if ! echo "$SEARCH_RESULTS_HTML" | grep -q 'id="resultsContainer"'; then
        if echo "$SEARCH_RESULTS_HTML" | grep -qiE "Verifying you are human|Checking your browser|checking if the site connection is secure|Enable JavaScript and cookies to continue|challenge-platform/turnstile"; then
            _say "[ERROR] The page received appears to be a Cloudflare challenge page." \
                 "[!] SHIT! GET request to ${EFFECTIVE_URL} looks like an ACTIVE Cloudflare challenge page. They're onto you, you sneaky bastard!"
        else
            _say "[WARNING] The expected results container was not found on the page, and it does not appear to be a standard Cloudflare challenge.
	    IT MAY BE DUE TO NO RESULTS FOR THE SEARCHED TERM" \
                 "[!] WARNING! Results container 'id=\"resultsContainer\"' NOT found, and no obvious Cloudflare challenge phrases detected. The page is probably fucked or some new kind of bullshit."
        fi
        SEARCH_RESULTS_HTML=""
        return 1 
    fi

    if [[ -z "$SEARCH_RESULTS_HTML" ]]; then 
        _say "[ERROR] The results page was unexpectedly empty after initial validation." \
             "[!] CRITICAL! resultsContainer found, but SEARCH_RESULTS_HTML is empty. What kind of black magic fuckery is this?!"
        return 1
    fi

    if echo "$SEARCH_RESULTS_HTML" | grep -qi "No results found"; then
        _say "[INFO] The search for '${current_search_term}' yielded no results on the site." \
             "[!] Site says: Search for '${current_search_term}' yielded jack shit, Captain. (But the page loaded, so your token's probably fine, surprisingly)"
    fi
    
    _debug_echo "perform_search_attempt identified results page successfully, returning 0."
    return 0
}

# --- Argument Parsing ---
usage() {
    echo "Usage: $0 [-d] [-f] \"search term\"" >&2
    echo "  -d : Enable debug mode (verbose output)" >&2
    echo "  -f : Enable foul mouth mode (CATSDK personality)" >&2
    exit 1
}

while getopts "df" opt; do
  case ${opt} in
    d )
      DEBUG_MODE=1
      echo "[+] Debug mode ENABLED." >&2 # This initial echo can stay as is
      ;;
    f )
      FOUL_MOUTH_MODE=1
      # Initial foul mouth confirmation
      _say "[+] Professional language mode enabled." \
           "[+] FOUL MOUTH MODE ENGAGED! LET'S FUCKING GOOOOO!"
      ;;
    \? )
      usage
      ;;
  esac
done
shift $((OPTIND -1)) 

if [ "$#" -eq 0 ]; then
  usage
fi
SEARCH_TERM="$*" 
_debug_echo "Search term: [${SEARCH_TERM}]"
# --- End Argument Parsing ---


# --- Main Fucking Script ---
CF_CLEARANCE_COOKIE=$(load_token_from_file)

if [ -z "$CF_CLEARANCE_COOKIE" ]; then
  _say "[INFO] No saved Cloudflare token found. Please provide one." \
       "[!] No saved CF token found. You're gonna have to cough one up, buttercup."
  CF_CLEARANCE_COOKIE=$(prompt_and_save_new_token)
  if [ -z "$CF_CLEARANCE_COOKIE" ]; then
    _say "[INFO] No token provided. Script will now exit." \
         "[!] Still no token? Well, I can't make magic happen with my dick alone. Exiting."
    exit 1
  fi
fi

if ! perform_search_attempt "$SEARCH_TERM" "$CF_CLEARANCE_COOKIE" "Initial"; then
    _say "[INFO] The initial search attempt failed. Please provide an updated Cloudflare token." \
         "[!] Initial search attempt shit the bed. Your token's probably as stale as last week's bread. Fork over a new one."
    CF_CLEARANCE_COOKIE=$(prompt_and_save_new_token)
    if [ -z "$CF_CLEARANCE_COOKIE" ]; then
        _say "[INFO] No new token provided after failure. Exiting." \
             "[!] Still no fucking token? You're testing my patience, asshole. Exiting."
        exit 1
    fi
    _say "[INFO] Retrying search with the new token..." \
         "[+] Alright, let's try this shit again with the new token. Fingers crossed, motherfucker."
    if ! perform_search_attempt "$SEARCH_TERM" "$CF_CLEARANCE_COOKIE" "Retry"; then
        _say "[ERROR] The search failed even with the new token. Please check the site or try again later." \
             "[!] FUCK IT ALL! Search failed even with the shiny new token. This site is fucked, or Cloudflare hates your guts. Giving up."
        exit 1
    fi
fi

if [ -z "$SEARCH_RESULTS_HTML" ]; then 
    _say "[WARNING] The search results page was empty. This usually indicates that no results were found for your query." \
         "[!] Warning: SEARCH_RESULTS_HTML is empty after all that. Probably means 'No results found', or you're just unlucky."
    _say "[INFO] No items to parse as the page was empty or contained a 'No results' message." \
         "[!] No parsable items found because the page was as empty as your skull if you expected results from nothing."
    exit 1
fi

RAW_ENTRIES=""
if command -v pup &> /dev/null; then
    _debug_echo "Parsing with 'pup'..."
    TITLES_TEXT=$(echo "$SEARCH_RESULTS_HTML" | pup --plain 'div.result-item attr{data-title}')
    SIZES_TEXT=$(echo "$SEARCH_RESULTS_HTML"  | pup --plain 'div.result-item attr{data-size}')
    URLS_TEXT=$(echo "$SEARCH_RESULTS_HTML"   | pup --plain 'div.result-item input.copy-checkbox attr{data-url}')

    if [ -z "$TITLES_TEXT" ] && [ -z "$URLS_TEXT" ]; then
        _say "[ERROR] Could not parse titles or URLs from the page. This may mean no results were found or the page structure has changed." \
             "[!] 'pup' couldn't find any fucking titles or URLs. Either your search was shit, or the site changed its goddamn layout again."
        exit 1
    fi
    RAW_ENTRIES=$(paste -d '@@@' \
        <(echo "$TITLES_TEXT") \
        <(echo "$SIZES_TEXT") \
        <(echo "$URLS_TEXT") | \
        awk -F '@@@' '{
            title=$1; size=$2; url=$3;
            if (size == "") size="N/A"; 
            if (title == "" && url == "") next; 
            print title " (" size ") ||| " url
        }')
else
    _say "[WARNING] 'pup' HTML parser not found. Falling back to a less reliable method. Please install 'pup' for best results." \
         "[!] 'pup' not found. Seriously, get it, you lazy fuck! Falling back to shitty 'awk', don't blame me if it breaks."
    RAW_ENTRIES=$(echo "$SEARCH_RESULTS_HTML" | awk '
        /class="[^"]*result-item[^"]*"/ {
            current_title = "UNTITLED_AWK_GARBAGE"; current_size = "N/A_AWK"
            if (match($0, /data-title="([^"]+)"/, t)) { current_title = t[1] }
            if (match($0, /data-size="([^"]+)"/, s)) { current_size = s[1] }
        }
        current_title != "UNTITLED_AWK_GARBAGE" && /class="[^"]*copy-checkbox[^"]*"/ {
            if (match($0, /data-url="([^"]+)"/, u)) {
                print current_title " (" current_size ") ||| " u[1]
                current_title = "UNTITLED_AWK_GARBAGE"
            }
        }
    ')
fi

if [ -z "$RAW_ENTRIES" ]; then
  _say "[INFO] No parsable items were found after processing the page content." \
       "[!] No parsable items found after all that fucking effort. Either the search was a dud or my parsing is shit today."
  exit 1
fi

_say "[INFO] Presenting search results..." \
     "[+] Alright, let's see what garbage we dredged up. Pick your poison, motherfucker:"

# FZF with full height and larger preview window
SELECTED_LINE=$(echo -e "$RAW_ENTRIES" | fzf \
    --delimiter='\|\|\|' \
    --with-nth=1 \
    --height='100%' \
    --layout=reverse \
    --border \
    --margin=1 \
    --ansi \
    --preview-window 'up,60%,border-top,wrap' \
    --preview 'echo {} | cut -d"|" -f1')


if [ -n "$SELECTED_LINE" ]; then
  SELECTED_URL=$(echo "$SELECTED_LINE" | sed 's/.* ||| //')
  SELECTED_TITLE_WITH_SIZE=$(echo "$SELECTED_LINE" | sed 's/ ||| .*//')
  
  _say "\n[INFO] You selected: ${SELECTED_TITLE_WITH_SIZE}" \
       "\n[+] Alright, you picked this lucky bastard: ${SELECTED_TITLE_WITH_SIZE}"
  
  _say "[INFO] Download Link: $SELECTED_URL" \
       "[+] Here's your goddamn link, hope it's not malware: $SELECTED_URL" 1 # Send URL to stdout

  if command -v xclip &> /dev/null; then echo "$SELECTED_URL" | xclip -selection clipboard; 
    _say "[INFO] Link copied to clipboard (xclip)." "[+] (Snatched that shit to your xclip clipboard, you efficient fuck!)"
  fi
  if command -v pbcopy &> /dev/null; then echo "$SELECTED_URL" | pbcopy; 
    _say "[INFO] Link copied to clipboard (pbcopy)." "[+] (Yoinked it to your pbcopy clipboard, Mac heathen!)"
  fi

  if command -v mpv &> /dev/null; then
    _say "[INFO] Attempting to play with mpv..." \
         "[+] Firing up mpv... Let's see if this shit actually plays, or if it's a goddamn rickroll."
    mpv --user-agent="${USER_AGENT}" --referrer="${EFFECTIVE_URL}" "$SELECTED_URL"
  else
    _say "[INFO] mpv media player not found. Cannot autoplay." \
         "[!] mpv not found. Guess you'll have to download it like a fucking caveman. Or install mpv, your choice."
  fi
else
  _say "[INFO] No selection was made." \
       "[!] No selection? What a fucking tease! All that work for nothing."
fi

_say "[INFO] Script execution finished." \
     "[+] Done. Go wank off or find some other way to waste your miserable existence."
